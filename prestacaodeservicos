pragma solidity 0.5.12;
   
    contract PrestacaoDeServicos
{
    string public prestador;
    string public empresa;
    uint256 public  valorHora;
    uint256 public horasTrabalhadas;
    bool[] public statusPagamento;
    address payable public contaprestador;

    constructor (
        string memory nomePrestador,
        string memory nomeEmpresa,
        uint256 valorHoraTrabalho,
        uint256 numeroHorasTrabalhadas,
        address payable ncontaprestador) public
        
        {
// require para que o contrato seja limitado a no m´áximo 66.000 ether
        
        require (valorHoraTrabalho<=300, "O VALOR DA HORA ULTRAPASSOU O LIMITE");
        require (numeroHorasTrabalhadas<=220, "O NÚMERO DE HORAS ULTRAPASSOU O LIMITE");
        
        prestador = nomePrestador;
        empresa = nomeEmpresa;
        valorHora = valorHoraTrabalho;
        horasTrabalhadas = numeroHorasTrabalhadas;
        contaprestador = ncontaprestador;
        }
    
    function remuneracaoFinal () public view returns (uint256 remuneracaoFinal)
    {
        remuneracaoFinal = valorHora*horasTrabalhadas;
        
/*condiç~ão para a ter uma remuneraç~ão m´ínima de 1.000 ether
            *Gostaria que aparecesse a mensagem que foi aplicada essa condiç~ão
*/
        if (remuneracaoFinal<1000)
        {    
            remuneracaoFinal = 1000;
        }

        }

//contrato tem duração de 12 meses
    function numeroParcela (uint256 numeroParcela) public
    {
        require (numeroParcela<12, "O CONTRATO EXPIROU. DURAÇÃO DE 12 MESES");
        for (uint i=1; numeroParcela<12; i++) {
            numeroParcela = numeroParcela + 1;
        }
    }  
    function efetuarPagamento() public payable 
    {
        contaprestador.transfer(msg.value);
        statusPagamento.push(true);
    }
}
